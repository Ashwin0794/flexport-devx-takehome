name: "Testing rock_paper_scissors on k8s clusterlocally using Kind"

on:
  workflow_run:
    workflows:
      - "Build docker Image and push to repo"
    types:
      - completed

env:
  IMAGE_NAME: ghcr.io/ashwin0794/flexport-devx-takehome/ashwin-flask-app:latest

jobs:
  kind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
      - name: Testing
        run: |
          kubectl wait nodes --for condition=Ready --all
          kubectl cluster-info
          kubectl get pods -n kube-system
          kubectl get nodes
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${{ env.KUBECONFIG }}

      - name: Deploy Application
        run: |
          echo "deploy application"
          kubectl create deployment ashwin-rps-app --image=${{ env.IMAGE_NAME }}
          kubectl wait pods --for condition=Ready --all --timeout=90s
          kubectl expose deployment/ashwin-rps-app --type=NodePort --port=5000

      - name: Install Test Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install curl
          pip install pytest
          pip install requests
          pip install coverage

      - name: Test Deployment
        run: |
          echo "cluster name"
          kubectl config current-context
          export NODE_PORT=$(kubectl get services/ashwin-rps-app -o go-template='{{(index .spec.ports 0).nodePort}}')
          echo NODE_PORT=${NODE_PORT}
          kubectl describe services/ashwin-rps-app
          export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
          kubectl port-forward service/ashwin-rps-app 5000:5000 > /dev/null &
          python -m pytest -v ./tests/integration/test_integeration.py
          #PYTHONPATH="./src" coverage run -m pytest ./tests/integration/
          curl localhost:5000/health
          PYTHONPATH="./src" coverage run -m pytest ./tests/integration/test_integeration.py
          PYTHONPATH="./src" coverage report -m | grep -e 'src' -e 'tests/'

      - name: Cleanup
        if: always()
        run: |
          echo "will delete cluster"
          export CLUSTER_NAME=$(kubectl config current-context)
          echo $CLUSTER_NAME
          kind delete cluster --name ${CLUSTER_NAME}


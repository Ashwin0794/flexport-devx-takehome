name: "Testing rock_paper_scissors on k8s clusterlocally using Kind"

on:
  workflow_run:
    workflows:
      - "Build docker Image and push to repo"
    types:
      - completed

env:
  IMAGE_NAME: ghcr.io/ashwin0794/flexport-devx-takehome/ashwin-flask-app:latest

jobs:
  kind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        #- name: Login to ghcr
        #  uses: docker/login-action@v1
        #  with:
        #    registry: ghcr.io
        #    username: ${{ github.actor }}
        #    password: ${{ secrets.CR_PAT }}
        #- name: pull and run
        #  run: |
        #    sudo apt-get update
        #    sudo apt-get install python3-pip
        #    sudo pip install pytest==7.2.2
        #    #git_repo=$( echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        #    #echo $git_repo
        #    #docker pull ${{ env.REGISTRY }}/$git_repo
        #    docker pull ${{ env.IMAGE_NAME }}
        #    docker images
        #    #docker run -d -p 5000 ${{ env.REGISTRY }}/$git_repo
        #    docker run -d -p 5000 ${{ env.IMAGE_NAME }}
        #    docker ps
        #    #docker run --rm ${{ env.REGISTRY }}/$git_repo pytest tests/
        #    docker run --rm ${{ env.IMAGE_NAME }} pytest tests/

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
      - name: Testing
        run: |
          #kind create cluster --name ashwin-rps-cluster
          kubectl wait nodes --for condition=Ready --all
          kubectl cluster-info
          kubectl get pods -n kube-system
          kubectl get nodes
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${{ env.KUBECONFIG }}

      - name: Deploy Application
        run: |
          echo "deploy application"
          #kind load docker-image ${{ env.IMAGE_NAME }} --name ashwin-rps-cluster
          kubectl create deployment ashwin-rps-app --image=${{ env.IMAGE_NAME }}
          #kubectl get pods
          #echo "------ DESCRIBING POD --------"
          #kubectl describe pod $(kubectl get pods | awk '/<pod-label-selector>/{print $1}')
          #kubectl describe pod
          # pod_name=$(kubectl get pods | tail -n1 | awk '{print $1}')
          # echo "-------- GET PODS --------------"
          # kubectl get pods
          # echo "======= PRINTING POD NAME =========="
          # echo $pod_name
          # #kubectl get pods -o jsonpath='{.items[*].spec.containers[*].name}'
          # kubectl get pod $pod_name -o json
          # #jq --version
          # #container_name=$(kubectl get pods -o jsonpath='{.items[*].spec.containers[*].name}' | jq -r .[0])
          # #echo "------ PRINTING CONTAINER NAME -------------"
          # #echo $container_name
          # echo "------- PRINTING POD LOGS ------"
          # #kubectl logs $pod_name ashwin-flask-app
          # #kubectl get deployments
          # sleep 90
          # kubectl get pods
          # kubectl describe pod $pod_name
          # kubectl logs $pod_name
          kubectl wait pods --for condition=Ready --all --timeout=90s
          kubectl expose deployment/ashwin-rps-app --type=NodePort --port=8080

      - name: Test Deployment
        run: |
          echo "cluster name"
          kubectl config current-context
          export NODE_PORT=$(kubectl get services/ashwin-rps-app -o go-template='{{(index .spec.ports 0).nodePort}}')
          echo NODE_PORT=${NODE_PORT}
          kubectl describe services/ashwin-rps-app
          export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
          kubectl port-forward service/ashwin-rps-app 8080:8080 > /dev/null &
          #kubectl exec -ti $POD_NAME -- curl localhost:8080/health

      - name: Cleanup
        if: always()
        run: |
          echo "will delete cluster"
          export CLUSTER_NAME=$(kubectl config current-context)
          kind delete cluster --name ${CLUSTER_NAME}

